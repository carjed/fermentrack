# Generated by Django 3.0.14 on 2022-04-07 14:33

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the board', max_length=128)),
                ('description', models.TextField(blank=True, default='', help_text='The description of the board')),
                ('weight', models.IntegerField(choices=[(1, '1 (Highest)'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9  (Lowest)')], default=5, help_text='Weight for sorting (Lower weights rise to the top)')),
                ('flash_options_json', models.TextField(blank=True, default='', help_text='A JSON list containing options to pass to subprocess')),
            ],
            options={
                'verbose_name': 'Board',
                'verbose_name_plural': 'Boards',
            },
        ),
        migrations.CreateModel(
            name='DeviceFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the device family', max_length=30)),
                ('flash_method', models.CharField(choices=[('avrdude', 'Avrdude (Arduino)'), ('esptool', 'Esptool (ESP8266)')], default='avrdude', max_length=30)),
                ('detection_family', models.CharField(choices=[('arduino', 'Arduino'), ('esp8266', 'ESP8266'), ('particle', 'Particle (Spark/Core)'), ('esp32', 'ESP32')], default='arduino', max_length=30)),
            ],
            options={
                'verbose_name': 'Device Family',
                'verbose_name_plural': 'Device Families',
            },
        ),
        migrations.CreateModel(
            name='Firmware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the firmware', max_length=128)),
                ('version', models.CharField(default='0.0', help_text='The major version number', max_length=20)),
                ('revision', models.CharField(blank=True, default='', help_text='The minor revision number', max_length=20)),
                ('variant', models.CharField(blank=True, default='', help_text="The firmware 'variant' (if applicable)", max_length=80)),
                ('is_fermentrack_supported', models.BooleanField(default=False, help_text='Is this firmware officially supported by Fermentrack?')),
                ('in_error', models.BooleanField(default=False, help_text='Is there an error with this firmware that should prevent it from being downloaded?')),
                ('description', models.TextField(blank=True, default='', help_text='The description of the firmware')),
                ('variant_description', models.TextField(blank=True, default='', help_text='The description of the variant')),
                ('post_install_instructions', models.TextField(blank=True, default='', help_text='Instructions to be displayed to the user after installation')),
                ('download_url', models.CharField(blank=True, default='', help_text='The URL at which the firmware can be downloaded', max_length=255)),
                ('download_url_partitions', models.CharField(blank=True, default='', help_text='The URL at which the partitions binary can be downloaded (ESP32 only, optional)', max_length=255)),
                ('download_url_spiffs', models.CharField(blank=True, default='', help_text='The URL at which the SPIFFS binary can be downloaded (optional)', max_length=255)),
                ('download_url_bootloader', models.CharField(blank=True, default='', help_text='The URL at which the bootloader binary can be downloaded (ESP32 only, optional)', max_length=255)),
                ('download_url_otadata', models.CharField(blank=True, default='', help_text='The URL at which the OTA Dta binary can be downloaded (ESP32 only, optional)', max_length=255)),
                ('spiffs_address', models.CharField(blank=True, default='', help_text='The flash address the SPIFFS data should be flashed to', max_length=12)),
                ('otadata_address', models.CharField(blank=True, default='', help_text='The flash address the SPIFFS data should be flashed to (ESP32 only)', max_length=12)),
                ('weight', models.IntegerField(choices=[(1, '1 (Highest)'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9  (Lowest)')], default=5, help_text='Weight for sorting (Lower weights rise to the top)')),
                ('checksum', models.CharField(blank=True, default='', help_text='SHA256 checksum of the file (for checking validity)', max_length=64)),
                ('checksum_partitions', models.CharField(blank=True, default='', help_text='SHA256 checksum of the partitions file (for checking validity)', max_length=64)),
                ('checksum_spiffs', models.CharField(blank=True, default='', help_text='SHA256 checksum of the SPIFFS file (for checking validity)', max_length=64)),
                ('checksum_bootloader', models.CharField(blank=True, default='', help_text='SHA256 checksum of the bootloader file (for checking validity)', max_length=64)),
                ('checksum_otadata', models.CharField(blank=True, default='', help_text='SHA256 checksum of the otadata file (for checking validity)', max_length=64)),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='firmware_flash.DeviceFamily')),
            ],
            options={
                'verbose_name': 'Firmware',
                'verbose_name_plural': 'Firmware',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the project the firmware is associated with', max_length=128)),
                ('description', models.TextField(blank=True, default='', help_text='The description of the project')),
                ('project_url', models.CharField(blank=True, default='', help_text='The URL for the project associated with the firmware', max_length=255)),
                ('documentation_url', models.CharField(blank=True, default='', help_text='The URL for documentation/help on the firmware (if any)', max_length=255)),
                ('support_url', models.CharField(blank=True, default='', help_text='The URL for support (if any, generally a forum thread)', max_length=255)),
                ('weight', models.IntegerField(choices=[(1, '1 (Highest)'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9  (Lowest)')], default=5, help_text='Weight for sorting (Lower weights rise to the top)')),
                ('show_in_standalone_flasher', models.BooleanField(default=False, help_text='Should this show standalone flash app?')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
            },
        ),
        migrations.CreateModel(
            name='FlashRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='queued', max_length=32)),
                ('serial_port', models.CharField(help_text='Path to the serial device used with the flash tool', max_length=255)),
                ('result_text', models.CharField(blank=True, default=None, help_text='String explaining the result status', max_length=255, null=True)),
                ('flash_output', models.TextField(blank=True, default=None, help_text='Output from the flash tool', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date this flash request was created')),
                ('board_type', models.ForeignKey(help_text='Board type being flashed', on_delete=django.db.models.deletion.CASCADE, to='firmware_flash.Board')),
                ('firmware_to_flash', models.ForeignKey(help_text='Firmware to flash', on_delete=django.db.models.deletion.CASCADE, to='firmware_flash.Firmware')),
            ],
        ),
        migrations.AddField(
            model_name='firmware',
            name='project',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='firmware_flash.Project'),
        ),
        migrations.AddField(
            model_name='board',
            name='family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='firmware_flash.DeviceFamily'),
        ),
    ]
